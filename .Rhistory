buildRFModel <- function() {
fitControl <- trainControl(method = "cv", number = 5)
fitRF <- train(Species ~ ., data = iris,
method = "rf",
trControl = fitControl)
print(timestamp())
return(fitRF)
}
predictIris <- function(trainedModel, inputs) {
prediction <- predict(trainedModel,
newdata = inputs,
type = "prob",
predict.all = TRUE)
#return(renderText(levels(iris$Species)[prediction]))
return(renderTable(prediction))
}
shinyServer(
function(input, output, session) {
data(iris)
myStr <- capture.output(str(iris))
myStr <- paste(myStr, collapse = "<br/>")
output$oStr <- renderText(myStr)
output$outputSepalWidth <- renderText(input$sepalWidth)
output$outputSepalLength <- renderText(input$sepalLength)
output$outputPetalWidth <- renderText(input$petalWidth)
output$outputPetalLength <- renderText(input$petalLength)
output$outputSepalWidthSD <- renderText(sd(iris$Sepal.Width))
output$outputSepalLengthSD <- renderText(sd(iris$Sepal.Length))
output$outputPetalWidthSD <- renderText(sd(iris$Petal.Width))
output$outputPetalLengthSD <- renderText(sd(iris$Petal.Length))
output$outputSepalWidthMean <- renderText(mean(iris$Sepal.Width))
output$outputSepalLengthMean <- renderText(mean(iris$Sepal.Length))
output$outputPetalWidthMean <- renderText(mean(iris$Petal.Width))
output$outputPetalLengthMean <- renderText(mean(iris$Petal.Length))
output$plotSepalWidth <- renderPlot({
ggplot(iris, aes(x = Sepal.Width,
group = Species,
fill = as.factor(Species))) +
geom_density(position = "identity", alpha = 0.5) +
scale_fill_discrete(name = "Species") +
theme_bw() +
xlab("Sepal Width") +
geom_vline(xintercept = input$sepalWidth,
color = "red",
size = 2) +
scale_x_continuous(limits = c(round(min(iris$Sepal.Width) / 2, 1),
round(max(iris$Sepal.Width) * 1.25, 1)))
})
output$plotSepalLength <- renderPlot({
ggplot(iris, aes(x = Sepal.Length,
group = Species,
fill = as.factor(Species))) +
geom_density(position = "identity", alpha = 0.5) +
scale_fill_discrete(name = "Species") +
theme_bw() +
xlab("Sepal Length") +
geom_vline(xintercept = input$sepalLength,
color = "red",
size = 2) +
scale_x_continuous(limits = c(round(min(iris$Sepal.Length) / 2, 1),
round(max(iris$Sepal.Length) * 1.25, 1)))
})
output$plotPetalWidth <- renderPlot({
ggplot(iris, aes(x = Petal.Width,
group = Species,
fill = as.factor(Species))) +
geom_density(position = "identity", alpha = 0.5) +
scale_fill_discrete(name = "Species") +
theme_bw() +
xlab("Petal Width") +
geom_vline(xintercept = input$petalWidth,
color = "red",
size = 2) +
scale_x_continuous(limits = c(round(min(iris$Petal.Width) / 2, 1),
round(max(iris$Petal.Width) * 1.25, 1)))
})
output$plotPetalLength <- renderPlot({
ggplot(iris, aes(x = Petal.Length,
group = Species,
fill = as.factor(Species))) +
geom_density(position = "identity", alpha = 0.5) +
scale_fill_discrete(name = "Species") +
theme_bw() +
xlab("Petal Length") +
geom_vline(xintercept = input$petalLength,
color = "red",
size = 2) +
scale_x_continuous(limits = c(round(min(iris$Petal.Length) / 2, 1),
round(max(iris$Petal.Length) * 1.25, 1)))
})
builtModel <- reactive({
buildRFModel()
})
observeEvent(
eventExpr = input[["submitBtn"]],
handlerExpr = {
withProgress(message = 'Just a moment...', value = 0, {
myModel <- builtModel()
})
Sepal.Length <- input$sepalLength
Sepal.Width <- input$sepalWidth
Petal.Length <- input$petalLength
Petal.Width <- input$petalWidth
myEntry <- data.frame(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
myPrediction <- predictIris(myModel, myEntry)
output$prediction <- myPrediction
})
observeEvent(input[["resetBtn"]], {
updateNumericInput(session, "sepalWidth", value = round(mean(iris$Sepal.Width), 1))
updateNumericInput(session, "sepalLength", value = round(mean(iris$Sepal.Length), 1))
updateNumericInput(session, "petalWidth", value = round(mean(iris$Petal.Width), 1))
updateNumericInput(session, "petalLength", value = round(mean(iris$Petal.Length), 1))
})
}
)
library(shiny)
data("iris")
# Define UI for application that draws a histogram
shinyUI(navbarPage("Iris Species Predictor",
tabPanel("Use the App",
sidebarPanel(
width = 8,
h3("Your choices (red lines) against iris dataset values."),
fluidRow(
splitLayout(cellWidths = c("50%", "50%"),
plotOutput("plotSepalWidth", height = "180px"),
plotOutput("plotSepalLength", height = "180px")
)),
fluidRow(
splitLayout(cellWidths = c("50%", "50%"),
sliderInput("sepalWidth",
"Sepal Width:",
min = round(min(iris$Sepal.Width) / 2, 1),
max = round(max(iris$Sepal.Width) * 1.25, 1),
value = round(mean(iris$Sepal.Width), 1)),
sliderInput("sepalLength",
"Sepal Length:",
min = round(min(iris$Sepal.Length) / 2, 1),
max = round(max(iris$Sepal.Length) * 1.25, 1),
value = round(mean(iris$Sepal.Length), 1))
)),
fluidRow(
splitLayout(cellWidths = c("50%", "50%"),
plotOutput("plotPetalWidth", height = "180px"),
plotOutput("plotPetalLength", height = "180px")
)),
fluidRow(
splitLayout(cellWidths = c("50%", "50%"),
sliderInput("petalWidth",
"Petal Width:",
min = round(min(iris$Petal.Width) / 2, 1),
max = round(max(iris$Petal.Width) * 1.25, 1),
value = round(mean(iris$Petal.Width), 1)),
sliderInput("petalLength",
"Petal Length:",
min = round(min(iris$Petal.Length) / 2, 1),
max = round(max(iris$Petal.Length) * 1.25, 1),
value = round(mean(iris$Petal.Length ), 1))
)),
actionButton(
inputId = "submitBtn",
label = "Classify My Iris"
),
actionButton(
inputId = "resetBtn",
label = "Reset"
)
),
mainPanel(
width = 4,
tabsetPanel(
tabPanel(p(icon("table"), "Classify Your Iris"),
h1("Prediction"),
h3("Shown as probabilities for each species."),
p("Choose your measurements and hit 'Classify My Iris'."),
tableOutput("prediction")
),
tabPanel(p(icon("table"), "Prediction Model"),
h1("Prediction Model"),
p("Predictions are based on a random forests model trained against the complete iris dataset. For more details view source on GitHub:"),
a(href = "http://github.com",
"http://github.com",
target = "_blank"),
h2("Dataset"),
p("The prediction model was trained on the Iris Dataset:"),
a(href = "https://en.wikipedia.org/wiki/Iris_flower_data_set",
"https://en.wikipedia.org/wiki/Iris_flower_data_set",
target = "_blank"),
h3("str(iris)"),
tableOutput("oStr")
)
)
)
),
tabPanel(p(icon("info"), "About"),
mainPanel(
includeMarkdown("about.Rmd"))
)
)
)
knitr::opts_chunk$set(echo = TRUE)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(galton)
summary(galton)
library(UsingR)
data(galton)
summary(galton)
library(UsingR)
library(caret)
data(galton)
# Transform inch to cm
galton = galton * 2.54
inTrain <- createDataPartition(y = galton$child, p=0.7, list=FALSE)
training <- galton[inTrain, ]
testing <- galton[-inTrain, ]
set.seed(32343)
modelFit <- train(child ~., data=galton, method="lm")
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
# sqrt(sum((predict(modelFit, newdata=training) - training$child)^2))
# sqrt(sum((predictions - testing$child)^2))
save(modelFit, file = "model1.rda")
=======
library(UsingR)
library(caret)
data(galton)
# Transform inch to cm
galton = galton * 2.54
inTrain <- createDataPartition(y = galton$child, p=0.7, list=FALSE)
training <- galton[inTrain, ]
testing <- galton[-inTrain, ]
set.seed(32343)
modelFit <- train(child ~., data=galton, method="lm")
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
# sqrt(sum((predict(modelFit, newdata=training) - training$child)^2))
# sqrt(sum((predictions - testing$child)^2))
save(modelFit, file = "model1.rda")
---
title: "Week3"
library(UsingR)
library(caret)
data(galton)
# Transform inch to cm
galton = galton * 2.54
inTrain <- createDataPartition(y = galton$child, p=0.7, list=FALSE)
training <- galton[inTrain, ]
testing <- galton[-inTrain, ]
set.seed(32343)
modelFit <- train(child ~., data=galton, method="lm")
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
# sqrt(sum((predict(modelFit, newdata=training) - training$child)^2))
# sqrt(sum((predictions - testing$child)^2))
save(modelFit, file = "model1.rda")
library(UsingR)
data(galton)
summary(galton)
library(UsingR)
library(caret)
data(galton)
# Transform inch to cm
galton = galton * 2.54
inTrain <- createDataPartition(y = galton$child, p=0.7, list=FALSE)
training <- galton[inTrain, ]
testing <- galton[-inTrain, ]
set.seed(32343)
modelFit <- train(child ~., data=galton, method="lm")
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
# sqrt(sum((predict(modelFit, newdata=training) - training$child)^2))
# sqrt(sum((predictions - testing$child)^2))
save(modelFit, file = "model1.rda")
install.packages("gapminder")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
install.packages("plotly")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(gapminder)
gDat <- gapminder
jDat <- droplevels(subset(gDat, continent != "Oceania"))
#colorsURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderCountryColors.txt"
# countryColors <- read.delim(file = colorsURL, as.is = 3) # protect color
countryColors <- read.delim(file="CountryColors", header=TRUE, as.is = 3)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(gapminder)
gDat <- gapminder
jDat <- droplevels(subset(gDat, continent != "Oceania"))
colorsURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderCountryColors.txt"
countryColors <- read.delim(file = colorsURL, as.is = 3) # protect color
countryColors <- read.delim(file="CountryColors", header=TRUE, as.is = 3)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(gapminder)
gDat <- gapminder
jDat <- droplevels(subset(gDat, continent != "Oceania"))
colorsURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderCountryColors.txt"
countryColors <- read.delim(file = colorsURL, as.is = 3) # protect color
countryColors <- read.delim(file="countryColors", header=TRUE, as.is = 3)
getwd(\)
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(gapminder)
gDat <- gapminder
jDat <- droplevels(subset(gDat, continent != "Oceania"))
colorsURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderCountryColors.txt"
countryColors <- read.delim(file = colorsURL, as.is = 3) # protect color
countryColors <- read.delim(file="CountryColors", header=TRUE, as.is = 3)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(gapminder)
gDat <- gapminder
jDat <- droplevels(subset(gDat, continent != "Oceania"))
colorsURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderCountryColors.txt"
countryColors <- read.delim(file = colorsURL, as.is = 3) # protect color
countryColors <- read.delim(file="C:\Users\Karan\Documents\CountryColors.txt", header=TRUE, as.is = 3)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(gapminder)
gDat <- gapminder
jDat <- droplevels(subset(gDat, continent != "Oceania"))
colorsURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderCountryColors.txt"
countryColors <- read.delim(file = colorsURL, as.is = 3) # protect color
countryColors <- read.delim(file="C:/Users/Karan/Documents/CountryColors.txt", header=TRUE, as.is = 3)
jColors <- countryColors$color
names(jColors) <- countryColors$country
jYear <- 2007
jDat <- jDat[with(jDat, order(year, -1 * pop)), ]
gap.bubble.plot <- ggplot(subset(jDat, year == jYear),
aes(x = gdpPercap, y = lifeExp )) + scale_x_log10() +
geom_point(aes(size = sqrt(pop/pi), text = paste(country, lifeExp, "years")), pch = 21) +
scale_size_continuous(range=c(1,40)) +
facet_wrap(~ continent) +
aes(fill = country) + scale_fill_manual(values = jColors) + theme(legend.position="none") +
xlab("GDP Per Capita\n") + ylab("\nLife Expectancy")
ggplotly(gap.bubble.plot, tooltip=c("text"))
devtools::install_github('hadley/ggplot2')
install.packages("devtools")
devtools::install_github('hadley/ggplot2')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(gapminder)
gDat <- gapminder
jDat <- droplevels(subset(gDat, continent != "Oceania"))
colorsURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderCountryColors.txt"
countryColors <- read.delim(file = colorsURL, as.is = 3) # protect color
countryColors <- read.delim(file="C:/Users/Karan/Documents/CountryColors.txt", header=TRUE, as.is = 3)
jColors <- countryColors$color
names(jColors) <- countryColors$country
jYear <- 2007
jDat <- jDat[with(jDat, order(year, -1 * pop)), ]
gap.bubble.plot <- ggplot(subset(jDat, year == jYear),
aes(x = gdpPercap, y = lifeExp )) + scale_x_log10() +
geom_point(aes(size = sqrt(pop/pi), text = paste(country, lifeExp, "years")), pch = 21) +
scale_size_continuous(range=c(1,40)) +
facet_wrap(~ continent) +
aes(fill = country) + scale_fill_manual(values = jColors) + theme(legend.position="none") +
xlab("GDP Per Capita\n") + ylab("\nLife Expectancy")
ggplotly(gap.bubble.plot, tooltip=c("text"))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(gapminder)
gDat <- gapminder
jDat <- droplevels(subset(gDat, continent != "Oceania"))
colorsURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderCountryColors.txt"
countryColors <- read.delim(file = colorsURL, as.is = 3) # protect color
countryColors <- read.delim(file="C:/Users/Karan/Documents/CountryColors.txt", header=TRUE, as.is = 3)
jColors <- countryColors$color
names(jColors) <- countryColors$country
jYear <- 2007
jDat <- jDat[with(jDat, order(year, -1 * pop)), ]
gap.bubble.plot <- ggplot(subset(jDat, year == jYear),
aes(x = gdpPercap, y = lifeExp )) + scale_x_log10() +
geom_point(aes(size = sqrt(pop/pi), text = paste(country, lifeExp, "years")), pch = 21) +
scale_size_continuous(range=c(1,40)) +
facet_wrap(~ continent) +
aes(fill = country) + scale_fill_manual(values = jColors) + theme(legend.position="none") +
xlab("GDP Per Capita\n") + ylab("\nLife Expectancy")
ggplotly(gap.bubble.plot, tooltip=c("text"))
library(ggplot2)
library(plotly)
library(gapminder)
gDat <- gapminder
jDat <- droplevels(subset(gDat, continent != "Oceania"))
colorsURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderCountryColors.txt"
countryColors <- read.delim(file = colorsURL, as.is = 3) # protect color
countryColors <- read.delim(file="C:/Users/Karan/Documents/CountryColors.txt", header=TRUE, as.is = 3)
jColors <- countryColors$color
names(jColors) <- countryColors$country
jYear <- 2007
jDat <- jDat[with(jDat, order(year, -1 * pop)), ]
gap.bubble.plot <- ggplot(subset(jDat, year == jYear),
aes(x = gdpPercap, y = lifeExp )) + scale_x_log10() +
geom_point(aes(size = sqrt(pop/pi), text = paste(country, lifeExp, "years")), pch = 21) +
scale_size_continuous(range=c(1,40)) +
facet_wrap(~ continent) +
aes(fill = country) + scale_fill_manual(values = jColors) + theme(legend.position="none") +
xlab("GDP Per Capita\n") + ylab("\nLife Expectancy")
ggplotly(gap.bubble.plot, tooltip=c("text"))
install.packages("webshot")
knit_with_parameters('~/week3.Rmd')
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
# Chunk 2
library(ggplot2)
library(plotly)
library(gapminder)
gDat <- gapminder
jDat <- droplevels(subset(gDat, continent != "Oceania"))
countryColors <- read.delim(file="C:/Users/Karan/Documents/CountryColors.txt", header=TRUE, as.is = 3)
jColors <- countryColors$color
names(jColors) <- countryColors$country
jYear <- 2007
jDat <- jDat[with(jDat, order(year, -1 * pop)), ]
gap.bubble.plot <- ggplot(subset(jDat, year == jYear),
aes(x = gdpPercap, y = lifeExp )) + scale_x_log10() +
geom_point(aes(size = sqrt(pop/pi), text = paste(country, lifeExp, "years")), pch = 21) +
scale_size_continuous(range=c(1,40)) +
facet_wrap(~ continent) +
aes(fill = country) + scale_fill_manual(values = jColors) + theme(legend.position="none") +
xlab("GDP Per Capita\n") + ylab("\nLife Expectancy")
ggplotly(gap.bubble.plot, tooltip=c("text"))
shiny::runApp('GitHub/DevelopingDataProducts/TextPredictor')
################# ~~~~~~~~~~~~~~~~~ ######## ~~~~~~~~~~~~~~~~~ #################
##                                                                            ##
##                        Data Science Capstone Project                       ##
##                                                                            ##
##                 Maximilian H. Nierhoff (http://nierhoff.info)              ##
##                                                                            ##
##           Github Repo: https://github.com/mhnierhoff/CapstoneCoursera      ##
##                                                                            ##
################# ~~~~~~~~~~~~~~~~~ ######## ~~~~~~~~~~~~~~~~~ #################
suppressPackageStartupMessages(c(
library(shinythemes),
library(shiny),
library(tm),
library(stringr),
library(markdown),
library(stylo)))
final4Data <- readRDS(file="C:/Users/Karan/Documents/ShinyApp/unigram.RDS")
final3Data <- readRDS(file="C:/Users/Karan/Documents/ShinyApp/bigram.RDS")
final2Data <- readRDS(file="C:/Users/Karan/Documents/ShinyApp/trigram.RDS")
head(final4Data)
dataCleaner<-function(text){
cleanText <- tolower(text)
cleanText <- removePunctuation(cleanText)
cleanText <- removeNumbers(cleanText)
cleanText <- str_replace_all(cleanText, "[^[:alnum:]]", " ")
cleanText <- stripWhitespace(cleanText)
return(cleanText)
}
cleanInput <- function(text){
textInput <- dataCleaner(text)
textInput <- txt.to.words.ext(textInput,
language="English.all",
preserve.case = TRUE)
return(textInput)
}
nextWordPrediction <- function(wordCount,textInput){
if (wordCount>=3) {
textInput <- textInput[(wordCount-2):wordCount]
}
else if(wordCount==2) {
textInput <- c(NA,textInput)
}
else {
textInput <- c(NA,NA,textInput)
}
### 1 ###
wordPrediction <- as.character(final4Data[final4Data$unigram==textInput[1] &
final4Data$bigram==textInput[2] &
final4Data$trigram==textInput[3],][1,]$quadgram)
if(is.na(wordPrediction)) {
wordPrediction1 <- as.character(final3Data[final3Data$unigram==textInput[2] &
final3Data$bigram==textInput[3],][1,]$trigram)
if(is.na(wordPrediction)) {
wordPrediction <- as.character(final2Data[final2Data$unigram==textInput[3],][1,]$bigram)
}
}
print(wordPrediction)
}
shiny::runApp('GitHub/DevelopingDataProducts/TextPredictor')
suppressPackageStartupMessages(c(
library(shinythemes),
library(shiny),
library(tm),
library(stringr),
library(markdown),
library(stylo)))
runApp('GitHub/DevelopingDataProducts/TextPredictor')
runApp('GitHub/DevelopingDataProducts/TextPredictor')
runApp('GitHub/TEXTPREDICTOR')
getwd()
setwd("C:/Users/Karan/Documents/GitHub/TEXTPREDICTOR")
getwd()
runApp()
runApp()
runApp()
